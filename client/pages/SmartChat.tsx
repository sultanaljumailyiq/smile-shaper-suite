import React, { useState, useRef, useEffect } from "react";
import { Link } from "react-router-dom";
import {
  ArrowRight,
  MessageSquare,
  Send,
  Bot,
  User,
  Paperclip,
  Mic,
  MoreVertical,
  Smile,
  Image,
  Phone,
  Video,
  Heart,
  ThumbsUp,
  AlertCircle,
  Clock,
  CheckCircle,
  Sparkles,
} from "lucide-react";
import { cn } from "@/lib/utils";
import { useI18n } from "@/lib/i18n";

interface Message {
  id: string;
  text: string;
  sender: "user" | "ai";
  timestamp: Date;
  type?: "text" | "image" | "suggestion";
  suggestions?: string[];
  reactions?: string[];
}

const quickSuggestions = [
  "ุฃุนุงูู ูู ุฃูู ูู ุงูุฃุณูุงู",
  "ููู ุฃุนุชูู ุจุฃุณูุงููุ", 
  "ูุง ุฃุณุจุงุจ ูุฒูู ุงููุซุฉุ",
  "ูุตุงุฆุญ ูุชุจููุถ ุงูุฃุณูุงู",
  "ุนูุงุฌ ุฑุงุฆุญุฉ ุงููู",
  "ุฃุญุชุงุฌ ุทุจูุจ ุฃุณูุงู ูุฑูุจ",
];

const aiResponses: Record<string, string> = {
  "ุฃุนุงูู ูู ุฃูู ูู ุงูุฃุณูุงู": "ุฃููู ุฃูู ุชุนุงูู ูู ุฃูู ูู ุงูุฃุณูุงู. ูููู ุฃู ูููู ุงูุฃูู ูุฒุนุฌุงู ุฌุฏุงู. ูู ููููู ูุตู ููุน ุงูุฃููุ ูู ูู ูุณุชูุฑ ุฃู ูุชูุทุนุ ููู ูุฒุฏุงุฏ ุนูุฏ ุชูุงูู ุงููุดุฑูุจุงุช ุงูุจุงุฑุฏุฉ ุฃู ุงูุณุงุฎูุฉุ",
  "ููู ุฃุนุชูู ุจุฃุณูุงููุ": "ุงูุนูุงูุฉ ุจุงูุฃุณูุงู ุฃูุฑ ููู ุฌุฏุงู! ุฅููู ุฃูู ุงููุตุงุฆุญ:\n\n1. ูุธู ุฃุณูุงูู ูุฑุชูู ููููุงู ุจูุนุฌูู ูุญุชูู ุนูู ุงููููุฑุงูุฏ\n2. ุงุณุชุฎุฏู ุฎูุท ุงูุฃุณูุงู ููููุงู\n3. ุงุณุชุฎุฏู ุบุณูู ุงููู ุงููุทูุฑ\n4. ููู ูู ุชูุงูู ุงูุณูุฑูุงุช\n5. ุฑุงุฌุน ุทุจูุจ ุงูุฃุณูุงู ูู 6 ุฃุดูุฑ",
  "ูุง ุฃุณุจุงุจ ูุฒูู ุงููุซุฉุ": "ูุฒูู ุงููุซุฉ ูู ุนุฏุฉ ุฃุณุจุงุจ ูุญุชููุฉ:\n\nโข ุงูุชูุงุจ ุงููุซุฉ (ุงูุณุจุจ ุงูุฃูุซุฑ ุดููุนุงู)\nโข ุชุฑุงูู ุงูุฌูุฑ\nโข ุชูุธูู ุงูุฃุณูุงู ุจููุฉ ุฒุงุฆุฏุฉ\nโข ููุต ููุชุงููู C\nโข ุจุนุถ ุงูุฃุฏููุฉ\nโข ุงูุชุบูุฑุงุช ุงููุฑููููุฉ\n\nูููุตุญ ุจูุฑุงุฌุนุฉ ุทุจูุจ ุงูุฃุณูุงู ูุชุญุฏูุฏ ุงูุณุจุจ ุงูุฏููู.",
  "ูุต๏ฟฝ๏ฟฝุฆุญ ูุชุจููุถ ุงูุฃุณูุงู": "ุฅููู ุทุฑู ุขููุฉ ูุชุจููุถ ุงูุฃุณูุงู:\n\nโจ ุทุฑู ุทุจูุนูุฉ:\nโข ุชูุธูู ููุชุธู ุจูุนุฌูู ูุจูุถ\nโข ุชุฌูุจ ุงููุดุฑูุจุงุช ุงูููููุฉ (ูููุฉุ ุดุงู)\nโข ุชูุงูู ุงูููุงูู ูุงููุฑุงููุฉ ูุงูุฃูุงูุงุณ\nโข ุงููุถูุถุฉ ุจุฒูุช ุฌูุฒ ุงูููุฏ\n\n๐ฅ ุทุฑู ุทุจูุฉ:\nโข ุชุจููุถ ุนูุฏ ุทุจูุจ ุงูุฃุณูุงู\nโข ููุงูุจ ุงูุชุจููุถ ุงููุฎุตุตุฉ\n\nุชุฌูุจ ุงููุตูุงุช ุงูููุฒููุฉ ุงููุงุณูุฉ!",
  "ุนูุงุฌ ุฑุงุฆุญุฉ ุงููู": "ุฑุงุฆุญุฉ ุงููู ุงููุฑููุฉ ูููู ุนูุงุฌูุง:\n\n๐ฆท ูุธุงูุฉ ุงููู:\nโข ุชูุธูู ุงููุณุงู ููููุงู\nโข ุงุณุชุฎุฏุงู ุบุณูู ูู ูุทูุฑ\nโข ุชูุธูู ุงูุฃุณูุงู ุจุนุฏ ูู ูุฌุจุฉ\n\n๐ ูุตุงุฆุญ ุฃุฎุฑู:\nโข ุดุฑุจ ุงููุงุก ุจูุซุฑุฉ\nโข ุชุฌูุจ ุงูุฃุทุนูุฉ ุฐุงุช ุงูุฑุงุฆุญุฉ ุงููููุฉ\nโข ุนูุงุฌ ุฃู ุงูุชูุงุจุงุช ูู ุงููู\n\nุฅุฐุง ุงุณุชูุฑุช ุงููุดููุฉุ ุฑุงุฌุน ุทุจูุจ ุงูุฃุณูุงู.",
  "ุฃุญุชุงุฌ ุทุจูุจ ุฃุณูุงู ูุฑูุจ": "ูููููู ูุณุงุนุฏุชู ูู ุงูุนุซูุฑ ุนูู ุทุจูุจ ุฃุณูุงู ููุงุณุจ! \n\n๐ ูุง ูุญุชุงุฌู:\nโข ูููุนู ุงูุญุงูู\nโข ููุน ุงูุนูุงุฌ ุงููุทููุจ\nโข ุงูุชุฃููู ุงูุทุจู (๏ฟฝ๏ฟฝู ูุฌุฏ)\nโข ุงูููุช ุงูููุงุณุจ ููููุนุฏ\n\nูู ุชุฑูุฏ ุงูุจุญุซ ุนู ุนูุงุฏุงุช ูุฑูุจุฉ ููู ุงูุขูุ",
};

export default function SmartChat() {
  const { language } = useI18n();
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "ูุฑุญุจุงู! ุฃูุง ูุณุงุนุฏู ุงูุฐูู ูุทุจ ุงูุฃุณูุงู. ููู ูููููู ูุณุงุนุฏุชู ุงููููุ",
      sender: "ai",
      timestamp: new Date(),
      type: "text",
      suggestions: quickSuggestions.slice(0, 3),
    }
  ]);
  const [inputText, setInputText] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [isRecording, setIsRecording] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async (text: string) => {
    if (!text.trim()) return;

    // ุฅุถุงูุฉ ุฑุณุงูุฉ ุงููุณุชุฎุฏู
    const userMessage: Message = {
      id: Date.now().toString(),
      text: text.trim(),
      sender: "user",
      timestamp: new Date(),
      type: "text",
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText("");
    setIsTyping(true);

    // ูุญุงูุงุฉ ุชุฃุฎูุฑ ุงูุฑุฏ
    setTimeout(() => {
      const aiResponse = aiResponses[text] || 
        "ุดูุฑุงู ูู ุนูู ุณุคุงูู. ุณุฃุญุชุงุฌ ุฅูู ูุฒูุฏ ูู ุงูุชูุงุตูู ูุฃุชููู ูู ูุณุงุนุฏุชู ุจุดูู ุฃูุถู. ูู ููููู ูุตู ุญุงูุชู ุฃูุซุฑุ";
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: aiResponse,
        sender: "ai",
        timestamp: new Date(),
        type: "text",
        suggestions: text.includes("ุทุจูุจ") ? ["ุงูุจุญุซ ุนู ุนูุงุฏุงุช", "ุญุฌุฒ ููุนุฏ", "ุงุณุชุดุงุฑุฉ ุนุงุฌูุฉ"] : undefined,
      };

      setMessages(prev => [...prev, aiMessage]);
      setIsTyping(false);
    }, 1500);
  };

  const handleSuggestionClick = (suggestion: string) => {
    sendMessage(suggestion);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      sendMessage(inputText);
    }
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ar-SA', { 
      hour: '2-digit', 
      minute: '2-digit',
      hour12: true 
    });
  };

  const startRecording = () => {
    setIsRecording(true);
    // ูุญุงูุงุฉ ุงูุชุณุฌูู ุงูุตูุชู
    setTimeout(() => {
      setIsRecording(false);
      sendMessage("ุชู ุชุญููู ุงูุฑุณุงูุฉ ุงูุตูุชูุฉ: ุฃุนุงูู ูู ุฃูู ูู ุงูุฃุณูุงู");
    }, 3000);
  };

  return (
    <div className="min-h-screen bg-gray-50" dir={language === "ar" ? "rtl" : "ltr"}>
      {/* Navigation */}
      <nav className="bg-white shadow-sm sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center gap-4">
              <Link
                to="/marketplace"
                className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
              >
                <ArrowRight className="w-5 h-5" />
                <span>ุงูุนูุฏุฉ ููุฎุฏูุงุช ุงูุทุจูุฉ</span>
              </Link>
              
              <div className="w-px h-6 bg-gray-300"></div>
              
              <div className="flex items-center gap-2">
                <div className="w-8 h-8 bg-gradient-to-r from-green-600 to-teal-600 rounded-lg flex items-center justify-center">
                  <MessageSquare className="w-4 h-4 text-white" />
                </div>
                <span className="text-xl font-bold text-gray-900">
                  ุงูุฏุฑุฏุดุฉ ุงูุฐููุฉ
                </span>
              </div>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm">
                <div className="w-2 h-2 bg-green-500 rounded-full animate-pulse"></div>
                <span>ูุชุงุญ ุงูุขู</span>
              </div>
              <button className="p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100">
                <MoreVertical className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </nav>

      <div className="max-w-4xl mx-auto p-4 h-[calc(100vh-4rem)] flex flex-col">
        {/* Chat Header */}
        <div className="bg-white rounded-t-2xl shadow-sm p-6 border-b">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 bg-gradient-to-r from-green-600 to-teal-600 rounded-full flex items-center justify-center">
              <Bot className="w-6 h-6 text-white" />
            </div>
            <div className="flex-1">
              <h3 className="text-lg font-semibold text-gray-900">
                ูุณุงุนุฏ ุทุจ ุงูุฃุณูุงู ุงูุฐูู
              </h3>
              <div className="flex items-center gap-2 text-sm text-green-600">
                <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                <span>ูุดุท ุงูุขู</span>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <button className="p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100">
                <Phone className="w-5 h-5" />
              </button>
              <button className="p-2 text-gray-500 hover:text-gray-700 rounded-lg hover:bg-gray-100">
                <Video className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>

        {/* Messages Area */}
        <div className="flex-1 bg-white overflow-y-auto p-6 space-y-6">
          {messages.map((message) => (
            <div
              key={message.id}
              className={cn(
                "flex gap-3",
                message.sender === "user" ? "justify-end" : "justify-start"
              )}
            >
              {message.sender === "ai" && (
                <div className="w-8 h-8 bg-gradient-to-r from-green-600 to-teal-600 rounded-full flex items-center justify-center mt-1">
                  <Bot className="w-4 h-4 text-white" />
                </div>
              )}
              
              <div className={cn(
                "max-w-md",
                message.sender === "user" ? "order-first" : ""
              )}>
                <div
                  className={cn(
                    "p-4 rounded-2xl",
                    message.sender === "user"
                      ? "bg-blue-600 text-white"
                      : "bg-gray-100 text-gray-900"
                  )}
                >
                  <p className="whitespace-pre-line text-sm leading-relaxed">
                    {message.text}
                  </p>
                </div>
                
                {/* Quick Suggestions */}
                {message.suggestions && (
                  <div className="mt-3 space-y-2">
                    {message.suggestions.map((suggestion, index) => (
                      <button
                        key={index}
                        onClick={() => handleSuggestionClick(suggestion)}
                        className="block w-full text-right p-3 bg-blue-50 text-blue-700 rounded-xl hover:bg-blue-100 transition-colors text-sm border border-blue-200"
                      >
                        {suggestion}
                      </button>
                    ))}
                  </div>
                )}
                
                <div className="flex items-center justify-between mt-2">
                  <span className="text-xs text-gray-500">
                    {formatTime(message.timestamp)}
                  </span>
                  {message.sender === "user" && (
                    <CheckCircle className="w-4 h-4 text-green-500" />
                  )}
                </div>
              </div>

              {message.sender === "user" && (
                <div className="w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center mt-1">
                  <User className="w-4 h-4 text-white" />
                </div>
              )}
            </div>
          ))}

          {/* Typing Indicator */}
          {isTyping && (
            <div className="flex gap-3 justify-start">
              <div className="w-8 h-8 bg-gradient-to-r from-green-600 to-teal-600 rounded-full flex items-center justify-center">
                <Bot className="w-4 h-4 text-white" />
              </div>
              <div className="bg-gray-100 rounded-2xl p-4">
                <div className="flex space-x-1">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.1s" }}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: "0.2s" }}></div>
                </div>
              </div>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>

        {/* Quick Suggestions Bar */}
        <div className="bg-white border-t p-4">
          <div className="flex gap-2 overflow-x-auto pb-2">
            {quickSuggestions.map((suggestion, index) => (
              <button
                key={index}
                onClick={() => handleSuggestionClick(suggestion)}
                className="flex-shrink-0 bg-gray-100 text-gray-700 px-4 py-2 rounded-full text-sm hover:bg-gray-200 transition-colors border border-gray-200"
              >
                {suggestion}
              </button>
            ))}
          </div>
        </div>

        {/* Input Area */}
        <div className="bg-white rounded-b-2xl shadow-sm p-4 border-t">
          {isRecording && (
            <div className="mb-4 bg-red-50 border border-red-200 rounded-xl p-4">
              <div className="flex items-center gap-3">
                <div className="w-4 h-4 bg-red-500 rounded-full animate-pulse"></div>
                <span className="text-red-700 font-medium">ุฌุงุฑู ุงูุชุณุฌูู...</span>
                <button
                  onClick={() => setIsRecording(false)}
                  className="mr-auto text-red-600 hover:text-red-700"
                >
                  ุฅููุงู
                </button>
              </div>
            </div>
          )}

          <div className="flex items-end gap-3">
            <button className="p-3 text-gray-500 hover:text-gray-700 rounded-xl hover:bg-gray-100 transition-colors">
              <Paperclip className="w-5 h-5" />
            </button>
            
            <button className="p-3 text-gray-500 hover:text-gray-700 rounded-xl hover:bg-gray-100 transition-colors">
              <Image className="w-5 h-5" />
            </button>

            <div className="flex-1 relative">
              <input
                ref={inputRef}
                type="text"
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="ุงูุชุจ ุฑุณุงูุชู ููุง..."
                className="w-full p-4 bg-gray-50 border border-gray-200 rounded-2xl focus:ring-2 focus:ring-green-500 focus:border-transparent resize-none"
                disabled={isRecording}
              />
              <button className="absolute left-3 top-1/2 transform -translate-y-1/2 p-1 text-gray-500 hover:text-gray-700">
                <Smile className="w-5 h-5" />
              </button>
            </div>

            <button
              onClick={() => startRecording()}
              disabled={isRecording}
              className={cn(
                "p-3 rounded-xl transition-colors",
                isRecording
                  ? "bg-red-100 text-red-600"
                  : "text-gray-500 hover:text-gray-700 hover:bg-gray-100"
              )}
            >
              <Mic className="w-5 h-5" />
            </button>

            <button
              onClick={() => sendMessage(inputText)}
              disabled={!inputText.trim() || isRecording}
              className="p-3 bg-green-600 text-white rounded-xl hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <Send className="w-5 h-5" />
            </button>
          </div>

          {/* Disclaimer */}
          <div className="mt-4 bg-amber-50 border border-amber-200 rounded-xl p-4">
            <div className="flex items-start gap-3">
              <AlertCircle className="w-5 h-5 text-amber-600 mt-0.5 flex-shrink-0" />
              <p className="text-amber-700 text-sm">
                ูุฐุง ๏ฟฝ๏ฟฝููุณุงุนุฏ ุงูุฐูู ููุฏู ูุนูููุงุช ุนุงูุฉ ููุท ููุง ูุบูู ุนู ุงุณุชุดุงุฑุฉ ุทุจูุจ ูุฎุชุต. 
                ูู ุญุงูุงุช ุงูุทูุงุฑุฆุ ูุฑุฌู ุงูุงุชุตุงู ุจุงูุทูุงุฑุฆ ููุฑุงู.
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
